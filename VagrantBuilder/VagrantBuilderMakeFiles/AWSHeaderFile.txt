# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #config.vm.box = "gusztavvargadr/w10e"
  config.vm.box = "dummy"
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.communicator = "winrm"
  config.vm.guest = :windows
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  ##config.vm.synced_folder "../SQLEXPR2016SP1_x64_ENU", "/SQLEXPR2016SP1_x64_ENU"
  #config.vm.synced_folder 'C:\\code\\Decisions60508', '/vagrant', type: "smb"
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  # vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   config.vb.memory = "4096"
  # end
  #
config.vm.provider "virtualbox" do |v|
  v.memory = 4098
  v.cpus = 2
end




# Specify configuration of AWS provider
config.vm.provider "aws" do |aws, override|
# Read AWS authentication information from envi
aws.block_device_mapping = [{ 'DeviceName' => '/dev/sda1', 'Ebs.VolumeSize' => $$AWS.DISKSIZE$$ }]
aws.access_key_id = "$$aws.access_key_id$$"
aws.secret_access_key = "$$aws.secret_access_key$$"
# Specify SSH keypair to use

# Specify region, AMI ID, Instance and security group
aws.region = "$$aws.region$$"
aws.ami = "ami-0f8d0019ef655a6a6"
aws.instance_type = "$$aws.instance_type$$"
aws.tags  = { 'Name' => '$$VMName$$'}
# Specify username and private key path



config.vm.communicator = "winrm"
  config.winrm.username = "Administrator"
  config.vm.boot_timeout = 2000 
  config.winrm.timeout = 2000 # 30 minutes
  config.winrm.max_tries = 20
  config.winrm.retry_limit = 200
  config.winrm.retry_delay = 10
  
    # Indicate that the password should be fetched and decrypted from AWS   
    override.winrm.password = :aws

    # private_key_path needed to decrypt the password
    override.ssh.private_key_path = "$$override.ssh.private_key_path$$"

    # keypair name corresponding to private_key_path
    aws.keypair_name = "$$aws.keypair_name$$"

    # Use a security group that allows WinRM port inbound (port 5985)
    aws.security_groups = [$$aws.security_groups$$]

    # Enable WinRM on the instance
    aws.user_data = <<-USERDATA
      <powershell>
        Enable-PSRemoting -Force
        netsh advfirewall firewall add rule name="WinRM HTTP" dir=in localport=5985 protocol=TCP action=allow
      </powershell>
    USERDATA
  
end
$$SCRIPT$$